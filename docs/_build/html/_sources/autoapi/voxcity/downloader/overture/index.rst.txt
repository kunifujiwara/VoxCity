voxcity.downloader.overture
===========================

.. py:module:: voxcity.downloader.overture

.. autoapi-nested-parse::

   Module for downloading and processing building footprint data from Overture Maps.

   This module provides functionality to download and process building footprints,
   handling the conversion of Overture Maps data to GeoJSON format with standardized properties.

   The module includes functions for:
   - Converting data types between numpy and Python native types
   - Processing and validating building footprint data
   - Handling geometric operations and coordinate transformations
   - Combining and standardizing building data from multiple sources

   Main workflow:
   1. Download building data from Overture Maps using a bounding box
   2. Process and standardize the data format
   3. Combine building and building part data
   4. Add unique identifiers and standardize properties



Functions
---------

.. autoapisummary::

   voxcity.downloader.overture.convert_numpy_to_python
   voxcity.downloader.overture.is_valid_value
   voxcity.downloader.overture.convert_gdf_to_geojson
   voxcity.downloader.overture.rectangle_to_bbox
   voxcity.downloader.overture.join_gdfs_vertically
   voxcity.downloader.overture.load_gdf_from_overture


Module Contents
---------------

.. py:function:: convert_numpy_to_python(obj)

   Recursively convert numpy types to native Python types.

   This function handles various numpy data types and complex nested structures,
   ensuring all data is converted to Python native types for JSON serialization.

   :param obj: Object to convert, can be:
               - dict: Dictionary with potentially nested numpy types
               - list/tuple: Sequence with potentially nested numpy types
               - numpy.ndarray: Numpy array to be converted to list
               - numpy.integer/numpy.floating: Numpy numeric types
               - native Python types (bool, str, int, float)
               - None values

   :returns: Converted object with all numpy types replaced by native Python types
   :rtype: object

   .. rubric:: Examples

   >>> convert_numpy_to_python(np.int64(42))
   42
   >>> convert_numpy_to_python({'a': np.array([1, 2, 3])})
   {'a': [1, 2, 3]}


.. py:function:: is_valid_value(value)

   Check if a value is valid (not NA/null) and handle array-like objects.

   This function is used to validate data before processing, ensuring that
   null/NA values are handled appropriately while preserving array-like structures.

   :param value: Value to check, can be:
                 - numpy.ndarray: Always considered valid
                 - list: Always considered valid
                 - scalar values: Checked for NA/null status

   :returns: True if value is valid (not NA/null or is array-like), False otherwise
   :rtype: bool

   .. note::

      Arrays and lists are always considered valid since they may contain
      valid data that needs to be processed individually.


.. py:function:: convert_gdf_to_geojson(gdf)

   Convert GeoDataFrame to GeoJSON format with coordinates in (lon, lat) order.

   This function processes a GeoDataFrame containing building data and converts it
   to a standardized GeoJSON format. It handles special cases for height values
   and ensures all properties are properly converted to JSON-serializable types.

   :param gdf: Input GeoDataFrame containing building data with columns:
               - geometry: Shapely geometry objects
               - height: Building height (optional)
               - min_height: Minimum building height (optional)
               - Additional property columns
   :type gdf: GeoDataFrame

   :returns:

             List of GeoJSON feature dictionaries, each containing:
                 - type: Always "Feature"
                 - properties: Dictionary of building properties including:
                     - height: Building height (defaults to 0.0)
                     - min_height: Minimum height (defaults to 0.0)
                     - id: Sequential unique identifier
                     - All other columns from input GeoDataFrame
                 - geometry: GeoJSON geometry object
   :rtype: list

   .. note::

      - Height values default to 0.0 if missing or invalid
      - All numpy types are converted to native Python types
      - Sequential IDs are assigned starting from 1


.. py:function:: rectangle_to_bbox(vertices)

   Convert rectangle vertices in (lon, lat) format to a bounding box.

   This function takes a list of coordinate pairs defining a rectangle and
   converts them to a bounding box format required by the Overture Maps API.

   :param vertices: List of tuples containing (lon, lat) coordinates
                    defining the corners of a rectangle
   :type vertices: list

   :returns:

             Bounding box coordinates in format (min_lon, min_lat, max_lon, max_lat)
                 suitable for use with Overture Maps API
   :rtype: tuple

   .. note::

      The function calculates the minimum and maximum coordinates to ensure
      the bounding box encompasses all provided vertices.


.. py:function:: join_gdfs_vertically(gdf1, gdf2)

   Join two GeoDataFrames vertically, handling different column structures.

   This function combines two GeoDataFrames that may have different columns,
   ensuring all columns from both datasets are preserved in the output.
   It provides diagnostic information about the combining process.

   :param gdf1: First GeoDataFrame (e.g., buildings)
   :type gdf1: GeoDataFrame
   :param gdf2: Second GeoDataFrame (e.g., building parts)
   :type gdf2: GeoDataFrame

   :returns:

             Combined GeoDataFrame containing:
                 - All rows from both input GeoDataFrames
                 - All columns from both inputs (filled with None where missing)
                 - Preserved geometry column
   :rtype: GeoDataFrame

   .. note::

      - Prints diagnostic information about column differences
      - Handles missing columns by filling with None values
      - Preserves the geometry column for spatial operations


.. py:function:: load_gdf_from_overture(rectangle_vertices)

   Download and process building footprint data from Overture Maps.

   This function serves as the main entry point for downloading building data.
   It handles the complete workflow of downloading both building and building
   part data, combining them, and preparing them for further processing.

   :param rectangle_vertices: List of (lon, lat) coordinates defining
                              the bounding box for data download
   :type rectangle_vertices: list

   :returns:

             Combined dataset containing:
                 - Building and building part geometries
                 - Standardized properties
                 - Sequential numeric IDs
   :rtype: GeoDataFrame

   .. note::

      - Downloads both building and building_part data from Overture Maps
      - Combines the datasets while preserving all properties
      - Assigns sequential IDs based on the final dataset index


